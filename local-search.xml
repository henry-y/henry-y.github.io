<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/21/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/09/21/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>前情提要是丰老师在内培布置了个作业，让我们自己搞个服务器折腾一下，自己搭个博客。</p><p>而我正好前段时间又想申请github的学生认证，于是决定先认证一下接着用白嫖的服务器把原本放在github page的博客迁移过去。</p><h2 id="github学生认证申请"><a href="#github学生认证申请" class="headerlink" title="github学生认证申请"></a>github学生认证申请</h2><p>申请地址在<a href="https://education.github.com/">这里</a></p><p>第一步是证明自己是个学生。按着流程填一下学生邮箱，学校名称就行了，那个<code>plan to use github</code>随便按自己的想法填一下就好啦</p><p>选择continue的时候它会check你是否在自己的学校里面，所以需要关掉梯子进行，而我关掉梯子后按continue一直没有反应，解决方法是f12，然后在more setting选项中的sensor选项更改经纬度为自己所在的位置。（这个百度随便找个查找当前位置经纬度的网站就好了）</p><p>接着要上传在读证明。我校的学生卡并没有毕业日期和入学日期，于是下载了学信网的在读报告，使用deepl翻译成英文（因为要求填的学校名字和证明上的学校名字一样），但是deepl的pdf不让打印，我的解决方法非常暴力，直接截图然后打印图片..）</p><p>我的第一次申请被机器人拒了，原因是我自己的github profile没写名字，要和申请的名字一样。</p><p>改完后再申请他在几分钟内就给我过了。现在就等人工审核就ok了~</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023春季学期小结</title>
    <link href="/2023/07/15/2023%E6%98%A5%E5%AD%A3%E5%AD%A6%E6%9C%9F%E5%B0%8F%E7%BB%93/"/>
    <url>/2023/07/15/2023%E6%98%A5%E5%AD%A3%E5%AD%A6%E6%9C%9F%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>一直想动笔记一记过去的这些日子，奈何这个学期实在是太忙了，期末考试结束后也忙于旅行和搬宿舍等诸多事宜，没能好好静下来写一写，而现今搬宿舍事宜已然处理完毕，坐在前往厦门听彩虹合唱团的动车上，终于掏出ipad打算写点什么东西，写点什么都好。</p><p>一个学期眨眼间就过去了，若要以几个词汇概括，那大概是忙碌，充实，又偶尔迷茫的。</p><span id="more"></span><p>就从上个学期临近结束时记起吧，在疫情最严重之时，学校宣布让学生们选择自愿返乡，当时我并没有选择第一批返乡，可能是因为四级考试，也更大概率是因为当时觉得要是期末考试不延期的话，还是尽快考掉为好，抱着想在假期的时候学一学技术的想法，最终留了下来。</p><p>不过在考完四级后发现风向基本就是全面缓考了，被考试而抑制的思乡之情自然地翻滚着，催促着我坐上返乡的高铁，当时做好了十足的防护，甚至还带上了学校给的防护面罩（虽然最后并没有戴上），听说一个同学还选择了穿防护服返乡。不过事实证明，防护的再好，全面放开后躲了多久也没什么用。</p><p>忘记是在回家前还是回家后宣布全面放开了，总之印象中是在返乡后一两个星期内父亲就被传染了，我自然也无法逃过一劫，全身发热，终日卧床和喉咙疼痛的感觉总是不好受的，不过比想象中的痛苦少了不少。新冠一次给我最不好的感觉还是对于运动机能方面的损伤，记得当时一回家就办了张健身房的季卡，想着能待两个月呢，把习惯保持下去为好，可惜才练了半个多星期后就阳了，之后因为包括阳后身体并未康复等种种原因也就林林总总加起来练了14天左右。（在学校的时候已经能40kg卧推3rm了，但是阳后25kg做一组就感觉心跳加快了一阵子，果断降重量空杆了，断断续续三个月才恢复原来的重量）</p><p>当时那段时间身体非常不适于是自然是没有心情理会网课的，虽然之前也是没怎么听的，但好歹是有学的，这下就全面放掉了。等人从高烧中缓过来后也差不多学期结束了，自然也就不管功课了，开始了我愉快的寒假生活，那时候看到了一个超算队的选拔通知，想着加个群fork一下仓库看一看玩一玩，当时并不觉得我能进队233。</p><p>在各种愉快的约人出行补充社交能量的同时也在慢慢看推荐书目里面的《并行程序设计导论》，当时觉得把书看完再做题应该能提高点效率（事实证明不如一开始就对着仓库开搞，后面也不会那么赶），一段时间后的春节在串门串门串门的过程中每天往死里做配环境和搭集群的任务。大概是这么个情况：早上起来，看看昨晚编译的软件有没有报错-&gt;解决报错or做下一步-&gt;出门前挂一个跑-&gt;回来后再看-&gt;睡前再挂一个。当时为编译各种应用抓耳挠腮了很久。</p><p>因为开始做选拔题比较晚所以直到回校前就还是没有搞完系统组就不得不因为acm队的训练回去了。这时候距离期末考试开始也只剩下一个月了，惊觉自己上学期的知识已经忘的差不多了，就只能一天三开，早上下午晚上分别挑数分大物线代来看，穿插着做acm的训练赛，努力拯救自己上学期没学明白的知识。而超算的选拔题也就先放掉了两三天才做一会，找了hh学长问ddl，说考试后还能给2周还是1周时间做，于是就理所当然的全面扔掉了。</p><p>同时因为考试安排在开学，英语课又有例行的小组pre环节，这学期没能抽签了，于是学号靠前的我们组就获得了考完试后第二天pre的殊荣…因此在考试前准备问卷做好大纲，考完试后大家出去放纵的夜晚在写pre稿背稿T_T（后面发现好多小组是直接对着稿子念，我当时脱稿的意义何在..!）</p><p>最终考试的成绩还算理想，也稍微捞了捞因为改成论文考察而成绩不出意料很烂的思政课。大家考完试后都玩玩玩，我：我去这选拔题要做不完了，熬熬熬往死里写，pre也还没做！🐔！….同时看着pyq的各位同学愉快的出行叹一口气，而后继续在灯下沉思presentation的稿子。</p><p>当时的part2和part3是在集群上跑的，但又是多人共用集群，所以为了更稳定的跑分结果，选择了要么熬大夜要么起大早（后来发现大家都熬夜我就选择早起了，有好几点是4，5点起来跑分的）…中间也去监考了一下gdkoi，正好是在超算选拔截止的最后两天，于是五点起来跑分跑完七点去六中上班一天:(。不过监考体验整体是不错的，圆了我那个——“从前我在台下坐牢，现在我在台上看着你们坐牢的愿望”。争取下学期去监考一下CSP-J&#x2F;S和NOIP。</p><p>在选拔结束的后就窝图书馆里补那几天的课…在数件事之间来回奔波好像也是我这个学期的主旋律。</p><p>上个学期的活动因为疫情原因大多没有顺利举办，因而全都堆到这个学期举行了，像什么草地音乐会、熊德龙常驻的艺术学院拿来练手的音乐会什么的都正常举行了，校园环境也往我更喜欢的那个方向去了。此时春风拂过三月，却带来了往年五月的气温，理解现在是厄尔尼诺年，但是，哎😴</p><p>三月也算是最喜欢的季节了，此时暂时没有什么负担而只需要学习课内功课以及补一补作业，作业自然是不急的，于是也算是本学期少有的能够享受一下比较悠闲的时光的时候了。网球课的上课地点在广寒宫边的网球场，三月时节的广寒宫繁花开遍，檐角处的风铃在暖风中悠然摇动，算是一周中最惬意的时刻了。学五食堂五月餐厅门口的花也别有风情，写这篇随笔的时候就又念起南校的好了，东校的建筑风格是非常纯粹的理工风格，远不及南校的红砖绿瓦更触动我的心弦，绿荫下的小道，转角处的花开，南校是一个非常适合生活的地方。</p><p>虽然说来惬意，但回想起当时实际其实也是相对忙碌的，三月和四月除了平时补补课上上新课，也先后参加了学校的acm校赛和新手赛，也打了gz哥哥千辛万苦终于办起来了的W4terCTF新手赛。前面两个稀疏平常没什么新意，现在对算法竞赛也实在是兴致索然，第一个因为和队友一起当了罚时战神而荣获二等奖的第一名，第二个则是没什么波澜的整了个rk1，毕竟大佬们都没来新手赛炸鱼，于是得到了一个五月去深圳参加广东省赛的旅游名额。倒是CTF的新手赛更有意思一点，CTF这种在赛中学的模式我很是喜欢，找了zrh和xrl一起组队，一起肝了一个星期，最后肝出了个rk8。期间课自然是没怎么上，只有李洽老师的数分课是节节不落，以及比如英语课这类必须要上的小班课以外，其他课就是能润就润，不能润就主打一个陪伴了。</p><p>因为那段时间的每个周末几乎都有杂七杂八的各种比赛，因而想去海珠湿地公园看花的想法最终到花期结束也还是没有去成（还记得当时已经完美排出一个周日，一起去的人都已经约好了，结果心理委员培训临时改期吃掉了我的那个周日…虽然享受了一次免费的团体心理辅导体验是非常不错的，但总归没能看成花还是一件十分可惜的事情）。</p><p>当然，周末没办法排上什么安排，那就要在工作日安排上！三月去东山口扫街拍了很多花花和建筑，还去吃了双皮奶，还记得当时周四下午一点出发的，下午四点就赶回来上程设实验课，哎！怎么计院的排课就没办法排出一个没有课的下午或者都是能翘掉的课的下午呢！也在校赛后的夜晚逛了华工的大学城校区（可惜是一样不讨人喜欢的四平八稳的建筑风格，相较之下还是更喜欢华工的五山校区）在清明节的时候回了一趟汕头，出游和健身算是这个学期我最能释放压力的方式了。</p><p>五一出门去景德镇&amp;武汉爽玩了5日，不过本篇主题是学期总结，决定不写相关内容，有空再写篇游记记录一下。51回来后没几日便是gdcpc省赛了，本想借此机会去找找hitsz的同学，结果发现距离竟有40km，于是在五一回来前就先去深圳找他们玩了两天。</p><p>省赛在深圳技术大学举办，这还是第一个我发现的没有围栏的大学（第二个是前几日去的hku），点亮了新地图「深圳坪山」，热身赛打打了事，晚上的社团之夜才是大头，随舞很好看，小活动也很多，我还去体验了 vr 击打式音游。第二日的正赛把easy和medium档的题目做完就正式选手rk3了，最后一个小时尝试开难题无果，最后被武大的队最后1min反杀了到正式选手rk4，不过最后奖杯的颁发是只看省内，于是🐶了个杯回来（但是奖杯实在长得有点丑..SZTU你其他纪念品和奖牌什么都做得那么好看怎么就这个奖杯做这么丑）话又说回来，武大的队来的人是wjy，是高中时就认识的网友了，这回是第一次线下见面，就来了场相爱相杀（）</p><p>打完省赛回来也就五月过半了，也差不多要开始紧张刺激的期末复习了！这时候统计了一下发现要学的东西内容还挺多的，数电大物数分的作业全都得写一遍…不过有一次期末考试的经验了感觉其实还行，大概定制了一下每天的计划，然后有序推进了一下，总之在紧赶慢赶下把作业都做了一两遍书也过了一两遍就过去一个月了。中间换了三四个自习的地点，最终还是更喜欢数学学院的研讨室，小教室好舒服，可以以各种姿势自习（不是）</p><p>四五月中也穿插着每两周有一场超算队的内培，有 lab 的 ddl 后感觉自己确实会更有动力学东西，不过因为复习期末考等事情的耽搁导致之前的lab还没有做完，好像也快到deadline了（）旅游完后马上开始做。前几日 hpc-pl 的结果也让我感觉到自己基础和经验上的不足。（不仅是写代码的经验更是分析问题的路数还没有学明白，才导致距离进答辩就差把omp parallel往前放两行）</p><p>复习的途中自然也穿插着一些出游，618的时候入了佳能r10，复习累了就拿出来在学校里散散步拍一拍，记录很快就要告别了的校园，偶尔也背着相机出门扫扫街，以拍出好片的快乐消解复习的焦虑和烦躁。</p><p>总之考试考的还算符合预期，应该成绩也和上学期相差不多，前两天也把宿舍搬完了，现在坐在前往厦门的动车上写下了这篇随笔，同时我这几天也有在想，达成刚上大学时对自己大一一年要做的事情的预期了吗？</p><p>大抵是完成了的，尝试了很多的新东西，学业和竞赛方面，绩点搞得还算可以，ACM，CTF，超算都有所尝试，算是完成了最初“广泛涉猎，找到自己相对最感兴趣的方面来深挖”的前半部分，开发方向的技能点没有怎么点，不过给matrix投了个简历，接下来在实践中磨一磨自己的开发向技能吧。实用向的技能也在慢慢看摄影有关教程，拍出好看的照片还是挺让我心情愉悦的。健身这个从高中就像尝试的兴趣也坚持了一年了，去健身房的时间有多有少，但始终是持续着的。也从刚高考完的58kg练到了现在的64kg，从之前的空杆推不动，器械也得不加配重到现在能够卧推40kg，杠铃划船60kg，深蹲60kg做组，虽然还是很菜，但是我会努力的！（第一个小目标，先把体重吃到70kg！）</p><p>第一年的大学生活给自己做了“加法”，现在应该也到了该做“减法”的时候了。“最感兴趣”这一名词又未免过于虚无缥缈，又有谁能保证一定能找到最感兴趣的东西呢，这也是我这一年时不时就会感到迷茫的地方。（解决方法一般是卷一会就不想了只想玩x）这学期广泛的涉猎各种比赛时我的个人体验给了我最直观的反馈，最终还是大概明确了接下来的方向：主要搞超算，多学点系统方向的东西，顺便把前端的技能点点个基础起来。ACM没能拿个icpc金 or icpc银终归还是有些可惜，不过终究还是决定放了。当时和刘神交流也被劝说再搞半年整个银再润，但是终究没有刘神那么nb的多开能力啊（猫猫叹气.jpg）你校的训练强度还是太抽象了。</p><p>上个月在刷看天下的时候刷到了黄仁勋的台大演讲：《当非常大的失败来临时》，颇受感触。一位长辈也曾跟我说过，大学要多参加讲座，有时候改变你思想的就是那一两句话给你的启发。我想这个演讲或许算是一个。</p><p>在此之前一直在犹豫要不要继续撑着打ACM，牺牲多一些假期的时间和周末的时间以及精力去换个icpc银回来，在读了这篇演讲稿之后才终于下定决心割舍这一部分。</p><blockquote><p>“放弃对你们这样聪明又成功的人来说并不容易。然而，有策略的撤退，牺牲，决定什么不要做，不就是成功的核心吗？”</p></blockquote><p>（另外，3b1b栏目创建者Grant在今年斯坦福毕业的演讲我也很喜欢，也推荐给看到这篇文章的你）</p><p>学会做出放弃的选择，在一个领域探索纵深的方向，打造自己的优势点，这或许是我能够在大二尝试去做的事情。</p><p>如果有空的话，也还想看一点社科的书籍（一年没有怎么写这种随笔类的东西还是能够明显感觉到自己对文字的掌控力在逐渐下降的，还是时不时看一点东西。虽然在过去的这个学年我也有这样的想法，不过最终还是没有做到），多拍出点让自己满意的照片，尝试那些听说过但是没有自己实践过的拍照技巧。</p><p>至于现在，动车也即将到站了，让我先忘却这些让人烦躁焦虑的思量，好好在音乐中享受「夏天的梦的颜色」吧！</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World!</title>
    <link href="/2022/12/02/start/"/>
    <url>/2022/12/02/start/</url>
    
    <content type="html"><![CDATA[<p>时隔三年终于重新捡起了hexo，就是没想到再次配置差不多这天居然正好是自己的生日。</p><p>希望能够好好维护不要像三年前那样用一会就扔了。</p><p>但是博客园那边的博客实在有点多，决定只把大一开学至今写的东西同步过来，但没想到加上昨天写的那篇rsa加密的博文都只有3篇，果然只有高中打OI那会才有强烈的写博客欲望。<del>现在的我好懒啊..</del></p><p>总之，Hello World！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>非对称加密与RSA算法初探</title>
    <link href="/2022/12/02/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <url>/2022/12/02/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<p>其实高中就大概了解过这是个什么原理，奈何一年半的高考备考让脑子退化严重，最近都在重新学以前学过的东西，在打算自己重新把 hexoblog 搭起来之后就去复习了一下Git的命令怎么用，上传ssh的时候就顺便把非对称加密的东西重新学了一下，于是出现了这篇笔记。</p><span id="more"></span><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>​一开始的间谍加密传输使用的是对称加密算法，即传输方和接收方都有一本密码本，也即双方持有共同一套密钥，这也就出现了电视剧上密码本泄露后一切GG的情节。而在上世纪七十年代出现了最早的非对称加密算法，算法使用的是私钥-公钥分发方式，顾名思义，前者是需要持有者保密的密钥，而后者是可以公开的，一系列的数论知识保证了只要私钥不被公开，那么信息就没有办法在<strong>可接受</strong>的时间内被破解。</p><p>​假设现在我们有博弈论老常客Alice和Bob进行信息交换，Alice通过Bob公开的公钥对传输的信息进行加密，然后发送密文，Bob通过私钥对密文进行解密，由于“只要私钥不被公开，那么信息就没有办法在<strong>可接受</strong>的时间内被破解”这个前提的保证，就能够保证只有Bob才能接收到这个信息。</p><p>​但同时，这套加密方式也存在第三方攻击的问题，比如henry_y拦截了Alice发出的信息并想要对Alice发出的信息进行篡改，虽然他不知道Alice发出的信息是什么，但是他可以通过Bob的公钥加密一系列谣言并附在信息后面重新发送给Bob。</p><p>​这时候我们就需要引入电子签名这种东西，同样由于“只要私钥不被公开，那么信息就没有办法在<strong>可接受</strong>的时间内被破解。”，那么Alice可以将这份信息用Bob的公钥进行加密，然后对加密后的密文进行一次哈希，再对哈希函数利用自己的私钥进行第二次加密，将这一二次加密过后的密文放在一次加密（即实际传输内容）的后面，就完成了<strong>“电子签名”</strong>这一操作。此时Bob只需要对签名利用Alice的公钥对密文进行一次解码，再将解码后的哈希值和原文本哈希后的值进行比对即可得知该文本没有经过篡改。这样henry_y进行的第三方攻击就会被识别出来了。（因为henry_y没有Alice的私钥，所以没有办法伪造签名，而只能利用自己的私钥进行加密，最终的文本比对就会失败）这一性质同时也决定了电子签名可以有和纸质签名一样的法律效用。</p><p>​matrix67的博客对一系列密码学问题举出了各种有意思的实例，强烈推荐食用。这里附一篇使用RSA算法的实例：<a href="http://www.matrix67.com/blog/archives/1362">密码学协议举例（四）：秘密数字的比较</a></p><p>​当然，实际上由于全部信息均使用非对称加密做法耗费算力过大，现在的实际应用方案中一般使用对称加密和非对称加密混合使用的方式（一般利用非对称加密在不安全的通信通道中传递对称加密的密钥，随后使用对称加密算法）</p><h2 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h2><p>​那么，非对称加密可以实现的数学基础是什么呢？</p><p>​首先目前是对大整数n因式分解没有很好的做法，所以只要这个大整数够大，我们就没办法在可接受的时间内对它进行因式分解，RSA算法的可行性便基于这点。</p><p>（下面的内容需要关于欧拉函数的前置知识）</p><p>​RSA算法的流程是，我首先选取两个足够大的质数p和q，然后计算出n&#x3D;p*q，根据欧拉函数的性质，有$\varphi(n) &#x3D; \varphi(p) *\varphi(q) &#x3D; (p-1)\times (q-1)$ ，此时我们再选择一个数e满足$1&lt;e&lt;\varphi(n)$，且e和$\varphi(n)$互质，根据我们已知的乘法逆元的性质，此时e必定存在逆元$d&#x3D;e^{-1}$，满足$d\times e \equiv 1\mod \varphi(n)$。</p><p>​那么我们将 n 和 e 作为公钥公布出去，并在自己处留存私钥 n 和 d 。任何人都可以利用函数$F(x)&#x3D;x^e \mod n$获得密文，并将其发送给私钥持有者，私钥持有者可以通过函数$G(x)&#x3D;x^d\mod n$从密文重新获得原文。由于外人不知道私钥的函数对应的d，也就无从对该信息进行可接受时间复杂度内的破译。（p和q则要在进行公私钥生成后进行销毁）</p><p>​可是为什么这可行呢？如果关心其背后的数学原理，不妨往下看：</p><p>​因为RSA是逐字符加密的，我们可以只研究单一字符，我们假设它是m（原文），密文为c，那么则有$F(m)&#x3D;m^e\mod n$，$G(c)&#x3D;c^d&#x3D; m^{ed}&#x3D; m^{k\varphi(n)+1}\mod n$，那么我们只需要证明$G(c)&#x3D;m$，也即$m^{k\varphi(n)}\equiv 1\mod n$。</p><p>​我们分两种情况讨论:</p><ol><li><p>n和m互质</p><p>此时我们通过费马小定理得知上述事实显然成立</p></li><li><p>n和m不互质</p></li></ol><p>​<strong>我们在做RSA时还要确保选取的n大于所有的被加密字符m</strong>，在这一前提下，m只能是p和q之一的倍数，不妨设为$m&#x3D;\lambda p$，则有$\lambda&lt;q$且 $\lambda$ 与 q 互质，那么由费马小定理有$m^{\varphi(q)}\equiv 1\mod q$，那我们只要把这个凑成n有关的形式就好了，$m^{k\varphi(p)\varphi(q)}\equiv1^{k\varphi(p)}\mod q$，即$m^{k\varphi(n)}\equiv 1\mod q$。</p><p>​那么存在整数x满足，$m^{k\varphi(n)}\equiv 1+xq$，又有$m&#x3D;\lambda p$，两边相乘即$m^{k\varphi(n)+1}\equiv m + xn$，即$m^{k\varphi(n)}\equiv m \mod n$。</p><p>​所以无论n，m是否互质上述函数关系均成立。我们也就证明了 RSA 算法的数学基础。</p><h2 id="盲签名"><a href="#盲签名" class="headerlink" title="盲签名"></a>盲签名</h2><p>​但是非对称加密真正精彩的地方在于它的应用， RSA 等加密算法只是它的基石。（基于它的各种构造才是最妙的）这里介绍其中和 RSA 的推导有关的一例。</p><p>​假设我们现在要实现这么一个需求，我们想要让人对一份文件签名，但不想让人知道文件的内容，这在过去可以让人对一张白纸先签名再写上文件内容实现，但是我们会发现这种方式在电子签名上行不通（电子签名基于使用私人密钥对文本内容进行再加密），但是我们可以通过特殊的构造方法使得盲签名在电子签名中也可行。</p><p>​考虑rsa的加密函数$F(x)&#x3D;x^e\mod n$和解码函数$G(x)&#x3D;x^d \mod n$，我们要让解密出来的内容是错误的，但再次加密得到的结果又是正确的，这提示我们要构造基于取模的冲突。</p><p>​不妨在加密函数时取一大随机数k，令 $x_1 &#x3D; xk^e$，将 x1 作为要签名的文件交给签名人，签名人用自己的私钥 d 对其进行签名，则$x_1^d&#x3D;x^dk^{ed}\mod m\equiv x^d$，但是同时签名因为不知道k是什么，所以他也不知道真实的密文是什么（他只能知道密文的通式），这样我们就成功实现了盲签名。</p><p>​而这一构造方法的一个可能应用场景就是电子的不记名投票。下面的内容转载自<a href="http://www.matrix67.com/blog/archives/1136">身份验证、中间人攻击和数字签名：浅谈密码学（中）</a></p><blockquote><p>  盲签名协议并不是只有特工才可能用到的东西，它的应用范围其实相当广。在生活中，我们每个人都可能用到过盲签名。一个最常用的例子就是投票协议——中央机构需要确定每张选票都来自合格的选举人，并且每个人最多投了一次票；但同时选举人又不希望在投票过程中泄露自己的选票内容。但是，为了检查选票的来源是否可靠，中央机构必然要鉴别每张选票所属的投票人。怎么办呢？此时，盲签名协议就派上用场了。每个选举人在自己的选票前面加上一个随机字符串作为前缀（防止以后被暴力破解），然后乘上随机数k的e次方，再连同一份（未被干扰的）身份证明，一同递交给中央机构。中央机构检查身份证明，确认这张（被干扰过的）选票来自合格的选举人。然后中央机构给这张选票签名，回传给选举人。选举人将签名结果除以k，用中央机构的公钥检查看签名是否有效，随机字符串是否和自己当初设定的一样。接着投票人匿名提交这份由中央机构签过名的（且不带干扰因子的）选票。中央机构收到选票，用公钥解密看签名是否有效。这样，中央机构既可以确信每张选票都来自合格的投票人，严格实行一人一票制度，又不能追查出任何一个投票者的选票内容。</p><p>  更复杂的盲签名协议来源于这样一种特殊情况：恐怖分子答应供出炸弹的位置，前提条件是需要得到一系列保证无罪逃脱的签名文件，包括新身份、新护照，以及总统亲自签署的免起诉书和安全离境的通行证。同时，恐怖分子又需要确信政府不能知道他的新身份和潜逃地。这需要政府在不知道文件内容的情况下签署协议。这与刚才所谈的盲签名有什么区别呢？一个巨大的区别就是，要求盲签名的不是特工，而是坏蛋，政府在没有看到文件之前不能随意签名。万一恐怖分子要求盲签名的文件实际上是一份要求政府保护全体恐怖分子的安全，保证所有人永不被通缉永不被起诉，并无偿提供恐怖组织基地和巨额资助等不平等条约该咋办？因此，这里需要一种比盲签名要求更高的协议：签名者不能看到文件内容，但要相信文件的内容是什么。</p><p>  看起来这似乎是办不到的，但事实上这是有可能的。我们有一个非常简单的办法，它是一个基于概率的协议。恐怖分子可以起草十份文件，每份文件里都包含了一个不同的新身份和潜逃地。然后恐怖分子用十个不同的随机数对这十份文件进行干扰，传给政府。政府选取其中的九份文件，向恐怖分子索要干扰因子。恐怖分子把对应的那九个k值传过去，政府对其进行解密，从而看到这九份文件都是符合要求的文件（只是文件中具体的身份名字和潜逃地点不一样）。政府对最后一个文件进行签名，并把签名结果回递给恐怖分子。恐怖分子除去干扰因子，得到他需要的签名文件。这样，恐怖分子可以保证政府不知道他的新身份和潜逃地，同时政府也能保证恐怖分子不会耍诈。恐怖分子只有1&#x2F;10的概率可以骗到政府，显然不值得恐怖分子去冒这个险。为安全起见，“10”这个数字还可以任意加大。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>封校小记</title>
    <link href="/2022/11/23/%E5%B0%81%E6%A0%A1%E5%B0%8F%E8%AE%B0/"/>
    <url>/2022/11/23/%E5%B0%81%E6%A0%A1%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>   翻相册之时发现封校已然一月整，困于宿舍的无趣生活不免催生摆烂心态，各ddl重压下的情形下反而更加有记一记近日生活的欲望，本想压一压等周末把作业高差不多再写，不过“ddl只会不断叠叠叠”的认识还是让我现在便打开了博客园的后台。</p><p>​但是因为之前是在博客园更新的好像把博文转过来被博客园的图床gank了，但是又懒得把那十多张照片换个图床，所以更好的阅读体验<a href="https://www.cnblogs.com/henry-1202/p/16918421.html">Click here</a></p><span id="more"></span><p>  虽然标题是封校小记，不过更想从十月初记起，就简单的分一下段吧。</p><h2 id="国庆小记"><a href="#国庆小记" class="headerlink" title="国庆小记"></a>国庆小记</h2><p>  国庆前的夜晚成功没有睡着，躺于床上漫天发呆时看一看广州日出的想法便慢慢萌生，在五点半的时候终于没有忍住，从床上爬起来下楼骑上单车，往珠江边上慢慢骑去，路上还遇到三两小猫（但是只进行了近距离拍摄），猫猫真的好可爱ww，凌晨五点半的珠江全是起床晨练的大爷大妈，感觉甚至比下午五点还多？正好日出的方向是广州塔的方向，于是骑着小破车慢悠悠转向广州塔。</p><p><img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123151538328-719796876.jpg"><br><img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123151600803-1082687193.jpg"></p><p>  当时行至广州塔轻轨站时听到了一阵悠扬的萨克斯声，走进去发现是两位老爷爷在演奏，驻足聆听许久，并为两位老爷爷献上了掌声（每次打破常规的出游总是能在没想到的地方找寻到惊喜），可惜不知为什么当时没有拿起手机记录下这一幕，现在脑袋里已经不太记得他们的样子了，只有当时驻足听歌的空灵与放松仍有余韵。</p><p>  而后在qq上抓了起床参加scut升旗仪式的ll来sysu找我玩，带他在鸭大校园逛了逛然后扔给了他的东方群群友，就赶去参加了金中er的聚餐了。<br>  <img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123153030015-653984208.jpg"><br>  你校人是真的有点多的.jpg，甚至直接塞满了一辆公交车，有高中时坐校车回家的感觉了。<br>  <img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123153013671-2129683999.jpg"><br>  下午还和学长学姐一起去了ktv团建，但48小时没合眼的后果就是第三天睡了十二三个小时…属于是不愿回忆的痛苦经历了。</p><p>  玩了两天之后就不得不开始准备acm队的训练（怎么国庆还加训啊，悲）以及同样也定在国庆的MSC的二面任务准备，感觉至今最高效率的两次一段时间的学习都是在MSC的任务中进行的，果然我这个人更加习惯一些任务驱动式的学习，当时照着菜鸟教程速成了C#的语法，并自己跟着教程撸了一个简单的web-api出来（但是现在应该已经忘得差不多了），当时上午睡觉下午打5h icpc，晚上硬学c#，精神状态好得很啊.jpg</p><p>  不过这种粗浅的webapi速成终究在二面时没派上用场（怀疑给我足够的时间可能也搞不太出来），幸好最终还是玩出来了三题，通过了二面（感觉有大一萌新身份加成，学长面我的时候问我你知不知道class的一些特性，我说不太清楚，后来了解到我是大一他就直接告诉我应该怎么改我的问题了）<br>  <img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123154302862-449537997.jpg" alt="开心！"><br>  短暂国庆假期的最后一天约了好朋友一起去星海音乐厅的音乐会（甚至还为此让他改了回广州的日期233），是让人身心十分愉快的艺术体验！加上乐团不间断的整活就更加愉悦了！（拼接痕迹极淡的串烧真的很棒！永远不知道接下来会是什么）并使用我的塑料粤语和大家一起合唱了我目前唯一会唱的粤语歌《海阔天空》 :)<br><img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123154911704-848099189.jpg"><br><img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123154920851-515376844.jpg"><br>  出来的时候看到了纪念品商店有彩虹合唱团《白鸟村漫游记》的专辑，想到了我没能抢到票的彩虹合唱团广州巡演…希望在我毕业前能够抢到一次票吧</p><h2 id="封校前夕"><a href="#封校前夕" class="headerlink" title="封校前夕"></a>封校前夕</h2><p>  《当时的我还不知道即将遭遇封校噩耗》</p><p>  国庆后大概保持了一个比较好的生活节奏，学习，锻炼，训练，学一些web知识和娱乐都有在有条不紊的推进，就是那段时间也养成了1点多才睡觉的坏习惯x（早十的罪恶其一）</p><p>  10月有一天在pyq看到“2022最美落日在今日出现”，看了看自己满课的今日课表，马上在群里摇人去太古仓看落日x，tt最后去了食堂，我火速撸完铁并10min速杀程设课堂题后和蛋蛋直奔太古仓。</p><p>  太古仓不愧是广州最适合看日落的地方，斥巨资在码头餐厅恰了一顿晚饭，在音乐餐吧看太阳慢慢沉入海中确实很是一种享受。但是我拉跨的拍照水平不能不是一种遗憾…</p><p>  在回程路上看到了新开的彩虹桥站地铁站，于是临场决定去看看这个听说很美的地铁站，顺便拐去边上吃芝麻糊和碗仔翅！（可惜碗仔翅因为太过畅销下午就关门了）</p><p>  <img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123162403897-734998559.jpg"><br>  <img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123162414133-1582728982.jpg"><br>  <img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123162423383-1236908672.jpg"></p><p>  紧接着的那个周末就去东校参加MSC的全员大会啦！是很有趣的体验呢。看到了各位大佬自我介绍中提及的各种听说过但完全不会和完全没听说过的东西，深感有很多可以学习的东西（虽然现在进度推进仍然缓慢就是了，开多坑每次ddl一来就要似了），和大家一起玩了cyc学长的switch，什么时候我打羽毛球接球才能像里面那么帅x，还留下来参与了MSC后面的聚餐，在东校也看到了绝美的晚霞！</p><p>  现场破冰小游戏有个猜数字取平均并*0.6的游戏，我通过缜密的计算成功在可能部分人还不是很了解游戏规则的情况下成功一发入魂第一次就猜中了（雾），可惜奖品是M码的社服和MSC club贴纸，就只剩下选贴纸一个选择了,,,</p><p>  但是那天晚上回到宿舍进行了10点半cf的一个打，愉快掉了大分——并且是至今打的最后一场cf，哎。。</p><p>  <img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123163957783-1276539309.jpg"></p><p>  期间不知道什么时候百度之星复赛的奖品到了，也算是圆了初中在百度之星打进400拿件衣服的愿望，不过今年的比以前的好看了不少，不枉我中秋翘掉院会去打比赛</p><p>  <img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123164115455-157398341.jpg"></p><p>  开始封校前的那个周末，周五晚听说有猎户座流星雨，于是在11点半下楼寻找适合的观星地，可惜找遍全校怎么哪里都是灯啊啊！本来逸夫楼楼顶是个不错的地方，但教学楼都被锁了..最后选择了西大操场，躺在草地上颇有以前和老爸在汕大的草坪上躺着的感觉。现场下载了一个星图，在ll的指点下找到了猎户座和火星土星等若干星球&#x2F;星系，蹲点1小时终于看到微黯的一束流星雨划过（许愿了！）</p><p>  <img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123171635022-2079361506.jpg"></p><p>  周六和何老师面了基，和他吃了顿牛肉火锅（怀念的味道！），何老师还拍了我涮牛肉的照片发到了群里233，那个周日吃了封校前的最后一顿M记（甚至在我吃一半的时候出了封闭管理的通知），但是那顿的M优惠力度好大，甚至因为吃不完再随机抓了个朋友来吃</p><p>  <img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123164521420-1528882234.jpg"><br>  好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅好想吃牛肉火锅<br>  <img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123164604138-1462926326.jpg"></p><h2 id="封校"><a href="#封校" class="headerlink" title="封校"></a>封校</h2><p>  已经整整一个月没有去过健身房啦！痛！太痛了！</p><p>  当时本来以为封校很快就过，就能早日继续我的出游计划了（我真没玩够啊…）并去健身房继续锻炼计划，但是一天比一天严重的海珠区让我不得不把目光投向操场（当时一个朋友跟我说英东有杠铃可以用，过去看后本来还嫌太脏，之后属于是口嫌体正直的英东钉子户x）</p><p>  在刚开始封校的时候看到GZ学长在群里宣传hackergame，正好ctf也是我神往已久的一个领域，健身计划被打乱也让我多出了不少时间来研究这玩意，那个星期也是最享受的高效摄入知识的时间，虽然每天熬到两点，但是光速精进了我的爬虫技巧，并迅速了解了一些基础的html和JavaScript语法，关于我的hackergame2022历程，<a href="https://www.cnblogs.com/henry-1202/p/16826666.html">可以移步这篇blog</a>。目前暂时有被咕咕咕的赛后补题计划x。最终结果是半入了ctf这个坑，并进了ctf的校队！还拿到了新生赛的奖品（虽然只是一本书并且至今还未到手..）</p><p>  直接后果就是欠下了巨量作业并成为了图书馆常驻用户…在你鸭能欠下的作业属实还是有点多的…</p><p>  封校的直接后果就是可支配时间的增加，不过我这一个月的感受就是我的有效学习时长并没有随之正比例增长，而存在相当的收敛性:)甚至在图书馆很多时候也会走神..可以理解，但不是很能接受吧，不过客观事实显然还是不随我的主观想法改变，比如说现在ddl堆叠如山但我现在在写这篇封校小记。</p><p>  封校后也出现了一些随机赋码事件，并因此体验到了人生的第一个黄码，甚至出现了大家的黄码八卦阵整活。<br><img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123172026564-1284221443.jpg"></p><p>  在这一段相对无趣的体验中，能聊以慰籍的是我还是发掘了不少愉快的体验吧。认识了不少新朋友（甚至去英东举铁3次加了三个人的微信好友），并且多了新的很对胃口的好朋友。挑战了卧推&amp;划船&amp;深蹲的40kg重量做5RM，都陆续成功了（但凡有可用的5kg杠铃片都不会这么快挑战这个233），在学习相对无趣的数学物理的同时见缝插针继续学了点爬虫，现在也快把爬虫的课刷完了。挑战了以前想都不敢想的10km长跑（想到许老师高三和我们说她跑了9.9km祝上一届学长学姐们高考加油的故事，”从未想象过，但咬咬牙挑战一下，你会发现居然自己也能做到！“）</p><p>  后来校内出现了阳性病例，于是封楼封寝，甚至英东都去不了了（猫猫头叹气.jpg），我应景地将微信拍一拍设置为了“并和他一起在宿舍里发霉”。鸭大的隔离伙食很好，但是我想要出去运动啊啊啊啊只有一个5kg哑铃翻来覆去找动作做的日子真的很不好过，而且在宿舍的学习效率还是不可避免地下滑了…可支配时间急剧增加，但有效利用时间急剧减少是我的封寝直观体验…</p><p>  并且封寝好巧不巧的撞上了icpc合肥，和辅导员多次交流沟通并和室友协调，并且去沟通了一下借了个打印机，才把宿舍腾出来打上了这场比赛，但是还是有一位队友因为防疫要求最终无法参加。本来以为双人打也没什么大不了的，但是现实还是给了我迎头重击，两个人和三个人的打法还是不一样的，而且客观上还是缺乏足够的训练强度，多少还是有点之前开摆的原因在那里的…今年的acm旅程估计也差不多结束了，比较遗憾吧，本来想要努努力拿个Ag，但是真的没能想到会打铁..赛场和平时训练还是有着蛮多区别的。也认识到了自己的客观实力还是远远不够啊。</p><p>  不过少去了acm的训练时间的话，ctf和web开发知识这些东西也可以尽快安排上了！希望自己能够尽量用好封控这段时间吧，虽然目前首先应该解决的是我的ddl问题…</p><p>  总之，鸭大加油，希望能早日解封，我也加加油，不要烂在宿舍x</p><p>  放一些封校但还未封寝时拍下的照片吧。</p><p>  <img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123174218859-590525498.jpg"><br><img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123174225574-592873695.jpg"><br><img src="https://img2022.cnblogs.com/blog/1113423/202211/1113423-20221123174239692-1603130587.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hackergame2022 Writeup</title>
    <link href="/2022/10/29/Hackergame2022_Writeup/"/>
    <url>/2022/10/29/Hackergame2022_Writeup/</url>
    
    <content type="html"><![CDATA[<p>萌新的第一次hackergame记录！</p><span id="more"></span><p>本writeup根据思路顺序呈现，<del>所以可能有点啰嗦</del></p><h1 id="赛中解决的题目"><a href="#赛中解决的题目" class="headerlink" title="赛中解决的题目"></a>赛中解决的题目</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>还不太适应模式，刚进去的时候玩了好久的画图，然后F12打开network-&gt;result把代码copy到vscode里面盯了十几二十分钟试图篡改时间戳，结果失败</p><p>然后回去再看了一下网址栏发现直接把4个问号改成2022就好了</p><h2 id="猫咪问答easy-version"><a href="#猫咪问答easy-version" class="headerlink" title="猫咪问答easy-version"></a>猫咪问答easy-version</h2><p>前三道题，第一道直接百度战队名就可以在新闻里面找到成立时间了，第二道题可以在中科大的LUC协会官网找到对应的那场会议的录屏（点进去评论区全是猫咪问答就知道找对了233），然后再搜了一下kde是什么上官网找了找发现了这个应用的名字，第三题的话上Wikipedia半分钟就能找到了</p><p>第六题的话，找到了2011&#x2F;01&#x2F;01但是好像不是这个时间..并没有告诉我更早的时间，4应该是直接上github找对应的仓库就可以了，然而网址的解密至今没有想法喵，所以就弃置了打算等如果写出来网址解密就继续扒一扒这两题。</p><h2 id="旅行照片2-0"><a href="#旅行照片2-0" class="headerlink" title="旅行照片2.0"></a>旅行照片2.0</h2><p>第一题查了一下exif是什么东西，惊为天人（下次回家就扒我爸照片看看他那些照片的iso和光圈还有快门速度都是怎么调了，直接开学！）然后把这张照片扔到一个在线的exif解析平台就能看到第一题要求的所有信息了</p><p>第二题的话，一开始查exif是什么东西的时候得知照片种可能有GPS信息，于是查了查怎么写扒照片里的GPS信息的代码，但是搞完后发现并不带这个信息，于是只能稍微裁了一下照片然后去google识图发现是日本千叶海洋球场（带夕阳直接找出来一堆奇怪的地方x），于是邮编get，手机型号的话上淘宝找了小米的手机哪个后置摄像头跟反光照出来的一样，至于找飞机还是太过魔幻，感觉应该是降落在成田国际机场的，但是试了几个方向正确的飞机，现在还没成功…也暂且弃疗了</p><h2 id="家目录里面的秘密"><a href="#家目录里面的秘密" class="headerlink" title="家目录里面的秘密"></a>家目录里面的秘密</h2><p>vscode部分，我是所有有代码的翻出来然后ctrl+F找flag关键词的，不过出于习惯的找文件路径很快在某个文件夹下的user&#x2F;history的文件中找到了，rclone就没有啥思路了（查了一下是个什么东西，但是不知道从何下手…等writeup出来再看看）</p><h2 id="企鹅拼盘（4bit）"><a href="#企鹅拼盘（4bit）" class="headerlink" title="企鹅拼盘（4bit）"></a>企鹅拼盘（4bit）</h2><p>16种情况，一个个试就行了</p><h2 id="HeiLang"><a href="#HeiLang" class="headerlink" title="HeiLang"></a>HeiLang</h2><p>怎么还嘲讽赛博丁真（乐</p><p>把每个|替换成“]&#x3D;a[”让它能够运行就行了，不是很会用正则表达式所以干脆写了个cpp替换了一下</p><h2 id="Xcaptcha"><a href="#Xcaptcha" class="headerlink" title="Xcaptcha"></a>Xcaptcha</h2><p>一个让我学到许多也破防许多的题目，写了大概两天半，以下是曲折的心路历程</p><p>一开始检查元素查了一下，发现需要发送post请求，看过了很多人本以为是静态的于是靠手速截图ocr了一下把算式搞出来然后用urllib写了个post交了一下结果连进都没进去…</p><p>然后再试了一次发现每次刷新cookie都会变，而且验证所需的算式也是动态的（这时候才发现有个Preserve Log的按键而不用靠手速来点（捂脸），并且这时候发现点进去有一个get请求，并且发现同次的post的cookie以及get的set-cookie是相同的，这时候就觉得应该可以先进行get请求然后通过它获取cookie还有算式的数据然后再来发送一个post完成提交。</p><p>思路有了，但是具体实现完全没有想法。（这对于只学过一点点python语法还有c#语法的小白还是有点困难了）决定面向搜索引擎编程，首先查了一下怎么获取动态cookie，了解到了原来有selenium这个库，跟着教程捣鼓安装然后敲了个get的代码获取了一个cookie，然后就思考如何获取算式，因为之前学爬虫学到xpath就因为军训歇下来了没有继续了，于是打开了尚硅谷继续从爬虫视频里面学习xpath的语法:)然后分别尝试了在线和离线两种的解析方式，在线的报错没有看懂，于是干脆把get获取的page_source放到本地，然后用etree离线搞一下，结果发现！meta nmd不是完全对称的没法用xpath…破防…于是干脆使用暴力一点的做法，看了一下page是str类型的，那我大力split！一个个遍历定位！然后再转int累加（这时代码就逐渐oi向了起来）</p><p>可以了，那综合一下再用urllib发个post，“验证失败”，经过一番思考并做无用功的捣鼓，把selenium的get_cookies也改成从headers里面用相同的方法暴力获取set-cookies..但是还是不行（成果是让代码几乎完全oi风格化了x）</p><p>一小时后终于发现应该是这个urllib+selenium的实现和我的需求不对应，应该是等价变成打开两次网页，或者说打开网页的想法就是错误的，于是决定干脆学了一个半爬虫库了干脆再学一个request…</p><p>第三天：request堂堂速通！思路是一样的，所以问题应该就是我上面写的缝合怪的问题了…实现方法都是完全一样的（代码量还是上面的$\frac{1}{3}$）</p><p>干脆把两份代码都放一下吧</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span> :<br>    hd = &#123;<br>        <span class="hljs-string">&quot;Cookie&quot;</span> : <span class="hljs-string">&quot;session=.eJwdkMtOAmEMhd9ltk5i73_rjiiR0ZgwIsRxKxgRIvcAGt_d6qJJc9rznabf1X522ldXFZqZOzkUL6KkKl4zCwcUcY-ioG451QgmFkAtqVApFjUpCVpoCLJzYUMT8uLKCCKhRRGCtEZRcyGDwMIFXEAQU0kYiAOFcFJKjUbABOCEUXLTc5yx6VR1BMpMFKmR0FHDJMjdAhgTy3_UKOxq5JTFNRnbfxoAslkekUlgaURktWwgzKiqq_1qMfvMZ6Rbrh763XXT3szb-Wj-1a6PH9vp8XJ_PkpzQbulL7rFYNgO-xMadxNf6GrXNu-9Zr25fRuOX_pPMtPB_e7w2G7Pp52dJ8vNc3PXpDId9Q7yOu2qn1-2QV2j.Y1qc9w.EypWQ93Hpc-evjQJf-dRU21WFKM&quot;</span>,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&quot;</span><br>    &#125;<br>    url = <span class="hljs-string">&quot;http://202.38.93.111:10047/xcaptcha&quot;</span><br>    <span class="hljs-comment"># url = &quot;http://baidu.com&quot;</span><br>    <span class="hljs-comment">#req = requests.get(url=url,headers=hd)</span><br>    req = requests.get(url=url,headers=hd)<br>    hd[<span class="hljs-string">&quot;Cookie&quot;</span>] = req.headers[<span class="hljs-string">&#x27;Set-Cookie&#x27;</span>]<br>    data = &#123;<br>        <span class="hljs-string">&quot;captcha1&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;captcha2&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;captcha3&quot;</span> : <span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>    content = req.text<br>    string_list = content.split()<br>    ans = <span class="hljs-number">0</span><br>    checklist = [<span class="hljs-number">0</span>] * <span class="hljs-number">3</span><br>    <span class="hljs-keyword">for</span> i, S <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(string_list) :<br>        <span class="hljs-keyword">if</span> S == <span class="hljs-string">&quot;的结果是？&lt;/label&gt;&quot;</span> :<br>            checklist[ans] = <span class="hljs-built_in">str</span>(string_list[i-<span class="hljs-number">1</span>])<br>            ans = ans + <span class="hljs-number">1</span><br>    Ans = [<span class="hljs-number">0</span>] * <span class="hljs-number">3</span><br>    <span class="hljs-keyword">for</span> i, S <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(checklist) :<br>        <span class="hljs-type">List</span> = S.split(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>        List1 = <span class="hljs-built_in">str</span>(<span class="hljs-type">List</span>[<span class="hljs-number">1</span>]).split(<span class="hljs-string">&#x27;+&#x27;</span>)<br>        Ans[i] = <span class="hljs-built_in">int</span>(List1[<span class="hljs-number">0</span>]) + <span class="hljs-built_in">int</span>(List1[<span class="hljs-number">1</span>])<br>    data[<span class="hljs-string">&quot;captcha1&quot;</span>]=<span class="hljs-built_in">str</span>(Ans[<span class="hljs-number">0</span>])<br>    data[<span class="hljs-string">&quot;captcha2&quot;</span>]=<span class="hljs-built_in">str</span>(Ans[<span class="hljs-number">1</span>])<br>    data[<span class="hljs-string">&quot;captcha3&quot;</span>]=<span class="hljs-built_in">str</span>(Ans[<span class="hljs-number">2</span>])<br><br>    req1 = requests.post(url=url,headers=hd,data=data)<br>    <span class="hljs-built_in">print</span>(req1.text)<br></code></pre></td></tr></table></figure><p>下面是我失败的缝合怪代码…</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.service <span class="hljs-keyword">import</span> Service<br><span class="hljs-keyword">from</span> seleniumwire <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span> :<br>    option = webdriver.ChromeOptions()<br>    option.add_experimental_option(<span class="hljs-string">&#x27;useAutomationExtension&#x27;</span>,<span class="hljs-literal">False</span>)<br>    option.add_experimental_option(<span class="hljs-string">&#x27;excludeSwitches&#x27;</span>, [<span class="hljs-string">&#x27;enable-automation&#x27;</span>])<br>    Cookie1 = <span class="hljs-built_in">dict</span>(<br>        name = <span class="hljs-string">&quot;session&quot;</span>, <br>        value = <span class="hljs-string">&quot;.eJwdkMtOAmEMhd9ltk5i73_rjiiR0ZgwIsRxKxgRIvcAGt_d6qJJc9rznabf1X522ldXFZqZOzkUL6KkKl4zCwcUcY-ioG451QgmFkAtqVApFjUpCVpoCLJzYUMT8uLKCCKhRRGCtEZRcyGDwMIFXEAQU0kYiAOFcFJKjUbABOCEUXLTc5yx6VR1BMpMFKmR0FHDJMjdAhgTy3_UKOxq5JTFNRnbfxoAslkekUlgaURktWwgzKiqq_1qMfvMZ6Rbrh763XXT3szb-Wj-1a6PH9vp8XJ_PkpzQbulL7rFYNgO-xMadxNf6GrXNu-9Zr25fRuOX_pPMtPB_e7w2G7Pp52dJ8vNc3PXpDId9Q7yOu2qn1-2QV2j.Y1qc9w.EypWQ93Hpc-evjQJf-dRU21WFKM&quot;</span><br>        )<br>    url = <span class="hljs-string">&quot;http://202.38.93.111:10047/xcaptcha&quot;</span><br>    urll = <span class="hljs-string">&quot;http://baidu.com&quot;</span><br>    s = Service(<span class="hljs-string">&quot;C:\Program Files\Google\Chrome\Application\chromedriver.exe&quot;</span>)<br>    driver = webdriver.Chrome(service=s,options=option)<br>    driver.get(url)<br>    <span class="hljs-comment">#print(driver.page_source)</span><br>    driver.add_cookie(Cookie1)<br>    driver.get(url)<br>    <span class="hljs-comment">#print(driver.page_source)</span><br>    <span class="hljs-comment">#time.sleep(20)</span><br>    strr = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-comment"># 获取response-headers 的 cookie</span><br>    <span class="hljs-keyword">for</span> request <span class="hljs-keyword">in</span> driver.requests :<br>        txt = <span class="hljs-built_in">str</span>(request.response.headers)<br>        <span class="hljs-comment">#print(txt)</span><br>        List2 = txt.split()<br>        <span class="hljs-keyword">for</span> i, S <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(List2):<br>            <span class="hljs-keyword">if</span> S == <span class="hljs-string">&#x27;Set-Cookie:&#x27;</span> :<br>                strr += List2[i+<span class="hljs-number">1</span>]<br>                strr += List2[i+<span class="hljs-number">2</span>]<br>                strr += List2[i+<span class="hljs-number">3</span>]<br>                <span class="hljs-keyword">break</span><br>    strrr = <span class="hljs-string">&quot;&quot;</span><br>    LList = strr.split(<span class="hljs-string">&#x27;;&#x27;</span>)<br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> LList :<br>        index = index + <span class="hljs-number">1</span><br>        strrr += i<br>        <span class="hljs-keyword">if</span> index != <span class="hljs-number">3</span> :<br>            strrr += <span class="hljs-string">&#x27;; &#x27;</span><br>    strr = strrr<br>    <span class="hljs-comment">#print(strr)</span><br>    <span class="hljs-comment"># 获取request-headers 的 cookie</span><br>    <span class="hljs-comment"># for request in driver.requests :</span><br>    <span class="hljs-comment">#     txt = str(request.headers)</span><br>    <span class="hljs-comment">#     List2 = txt.split()</span><br>    <span class="hljs-comment">#     print(List2)</span><br>    <span class="hljs-comment">#     for i, S in enumerate(List2):</span><br>    <span class="hljs-comment">#         if S == &#x27;Cookie:&#x27; :</span><br>    <span class="hljs-comment">#             strr += List2[i+1]</span><br>    <span class="hljs-comment">#             break</span><br>    <br>    text = driver.page_source<br>    string_list = text.split()<br>    ans = <span class="hljs-number">0</span><br>    checklist = [<span class="hljs-number">0</span>] * <span class="hljs-number">3</span><br>    <span class="hljs-keyword">for</span> i, S <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(string_list) :<br>        <span class="hljs-keyword">if</span> S == <span class="hljs-string">&quot;的结果是？&lt;/label&gt;&quot;</span> :<br>            checklist[ans] = <span class="hljs-built_in">str</span>(string_list[i-<span class="hljs-number">1</span>])<br>            ans = ans + <span class="hljs-number">1</span><br>    Ans = [<span class="hljs-number">0</span>] * <span class="hljs-number">3</span><br>    <span class="hljs-keyword">for</span> i, S <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(checklist) :<br>        <span class="hljs-type">List</span> = S.split(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>        List1 = <span class="hljs-built_in">str</span>(<span class="hljs-type">List</span>[<span class="hljs-number">1</span>]).split(<span class="hljs-string">&#x27;+&#x27;</span>)<br>        Ans[i] = <span class="hljs-built_in">int</span>(List1[<span class="hljs-number">0</span>]) + <span class="hljs-built_in">int</span>(List1[<span class="hljs-number">1</span>])<br>    <span class="hljs-comment">#    print(List1[0], List1[1], Ans[i])</span><br><br>    <span class="hljs-comment"># # captcha1 = driver.find_element(&quot;xpath&quot;, &#x27;//label[for=&quot;captcha1&quot;]/text()&#x27;)</span><br>    <span class="hljs-comment"># # # 搞不懂搞不懂</span><br>    <span class="hljs-comment"># # print(captcha1)</span><br><br>    hd = &#123;<br>        <span class="hljs-string">&quot;Cache-Control&quot;</span>: <span class="hljs-string">&quot;max-age=0&quot;</span>,<br>        <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;29&quot;</span>,<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,<br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;202.38.93.111:10047&quot;</span>,<br>        <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;http://202.38.93.111:10047&quot;</span>,<br>        <span class="hljs-string">&quot;Proxy-Connection&quot;</span>: <span class="hljs-string">&quot;keep-alive&quot;</span>,<br>        <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;http://202.38.93.111:10047/&quot;</span>,<br>        <span class="hljs-string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&quot;</span><br>    &#125;<br>    hd[<span class="hljs-string">&quot;Cookie&quot;</span>] = strr<br>    data = &#123;<br>        <span class="hljs-string">&quot;captcha1&quot;</span>:<span class="hljs-string">&quot;337605126759167072227735090115749459132&quot;</span>, <br>        <span class="hljs-string">&quot;captcha2&quot;</span>:<span class="hljs-string">&quot;275363884278949671003218244434521978720&quot;</span>,<br>        <span class="hljs-string">&quot;captcha3&quot;</span>:<span class="hljs-string">&quot;449082777171456801985478338295611554214&quot;</span> <br>    &#125;<br>    data[<span class="hljs-string">&quot;captcha1&quot;</span>]=<span class="hljs-built_in">str</span>(Ans[<span class="hljs-number">0</span>])<br>    data[<span class="hljs-string">&quot;captcha2&quot;</span>]=<span class="hljs-built_in">str</span>(Ans[<span class="hljs-number">1</span>])<br>    data[<span class="hljs-string">&quot;captcha3&quot;</span>]=<span class="hljs-built_in">str</span>(Ans[<span class="hljs-number">2</span>])<br>    data = urllib.parse.urlencode(data).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    R = urllib.request.Request(url=url, data=data,headers=hd)<br>    response = urllib.request.urlopen(R)<br>    content = response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></table></figure><h2 id="LaTeX-机器人"><a href="#LaTeX-机器人" class="headerlink" title="LaTeX 机器人"></a>LaTeX 机器人</h2><ul><li>没有特殊字符的part</li></ul><p>本来看到这题以为是sql注入的，都已经打开sql注入的语句列表准备突击速成了，不过在此之前还是打算先了解一下如何通过这个latex的实现流程或者照片的生成进行攻击，于是google查找了一下“pdflatex漏洞”，结果找到了<a href="https://www.freebuf.com/articles/security-management/308191.html">一篇非常有启发性的文章</a>，在其中发现了latex有\input和\write18等实现，并在知乎找到了<a href="https://zhuanlan.zhihu.com/p/465718748">另一个与图片有关的sql注入</a>，这时候大概脑子里有了一点模糊的方向。然后点开了他的压缩包仔细读了一下（现在居然也能读懂没学过的语言大概是在干啥了），发现实现规则实际上是将</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>[preview]&#123;standalone&#125;<br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><p>这两段分别插入你写的数学公式的前后，而flag1又保证了只有普通字符，那我只需要对上下的两个$$分别再匹配一次然后\input flag1就行了</p><p>最终实现是</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">qaq<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> <span class="hljs-keyword">\input</span>&#123;/flag1&#125; <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span>qwq<br></code></pre></td></tr></table></figure><ul><li>有特殊字符的part</li></ul><p>把&#x2F;flag1换成&#x2F;flag2后发现无法编译，接着去上了节体育课，在体育课时有了几个想法</p><ol><li><p>首先一开始根据查到的信息脑补了一个获取信息然后插入到生成图片的exif上面的方法，但是觉得实现难度太高了就完全没去想怎么写了。然后在写flag1之前查了一下input的实现，发现是直接把文本copy过来到这个tex里面，那我只需要这个copy过来的文本没有特殊字符就行了——刚才又了解到write18方法可以直接打开shell，那么我只要写一个shell里面的命令把flag2里面的特殊字符替换一下就行了！</p><p>结果晚上写了一下发现不行…觉得可能是服务器没有给改文件的权限，于是放弃了这条路，代码如下</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex">qwq<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\immediate</span><span class="hljs-keyword">\write</span>18&#123;<br>sed -i &#x27;s/<span class="hljs-params">#</span>/bar/g&#x27; &#x27;s/<span class="hljs-built_in">_</span>/Bar/g&#x27; flag2<br>&#125;<br><span class="hljs-keyword">\input</span>&#123;/flag2&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span>qaq<br></code></pre></td></tr></table></figure></li><li><p>另一种朴素的想法是，那我换成\text{}直接强转为文本输出，但是也会转义，那另一种思路应该就是找个不转义内容但能在最终生成的pdf中呈现内容的method。我唯一想到的是要么使用\url方法将这个flag2作为url输出要么这个作为latex中的代码块输出..但是因为它们都要用到特定的宏包但我又不能额外使用宏包而寄了…在接下来的三个小时高强度尝试了我所知的各种不需要用到usepackage的latex命令，并在过程中发现了一个tex论坛，后来逐渐从google转到了tex论坛中高强度检索，然后找到了\verbatim这个命令，接着往下找，发现了\VerbatimInput并在一个五年前的帖子中找到了和我同样需求的人<a href="https://tex.stackexchange.com/questions/351186/how-to-include-contents-of-file-as-verbatim">（帖子）</a></p><p> 但我尝试这个后bot解析不了..这个东西也需要宏包…变成了狂暴翻帖组长，继续想了想，想到\def和\newcommand这种类似#define的命令如果可以传入参数的话可能就会先将语句执行出来后再进行语块组合，那么newcommand又可以自定义参数，于是定义了这么一个命令传了三个参数也寄了，此时已经接近凌晨两点了，于是摆烂睡觉。</p><p> 第二天起床不是很甘心，继续研究了一下发现一个帖子里面说newcommand不能包含\end{}命令会报语法错误，于是把昨晚那个传3个参数改成传2个参数然后\end{verbatim}独立出来，就解决了…（所以其实昨晚熬到两点也是可以解决问题的，雾）</p><p> 最终的命令很简洁：</p> <figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">qwq<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\newcommand</span><span class="hljs-keyword">\qwq</span>[2]&#123;<span class="hljs-params">#1</span> <span class="hljs-params">#2</span>&#125;<br><span class="hljs-keyword">\qwq</span>&#123;<span class="hljs-keyword">\begin</span>&#123;verbatim&#125;<span class="hljs-string">&#125;&#123;\input&#123;/flag2&#125;&#125;</span><br><span class="hljs-string"></span><span class="hljs-keyword">\end</span>&#123;verbatim&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span>qaq<br></code></pre></td></tr></table></figure></li></ol><p>写完latex-bot这题也就剩一两个小时比赛结束了，最终结果是1050分，给我的感觉就是hackergame真好玩但是我已经要变成狂暴补作业组长了…因为在比赛开始三天我才在GZTime等学长在群里复读“来打hackergame谢谢喵”才发现原来hackergame开始了:)，所以时间其实不是很充足，不过还好因为是大一大部分课可以摸鱼想题勉强还行，可能多个一两天时间能再突击学习一点多混个两三百分吧，不过现在这个分数我也很满意了，毕竟只是刚接触这玩意的萌新一枚，每道题都花了大量时间学相关概念…</p><p>四天半的突击hackergame也确实让我受益匪浅，了解并实践了HTTP的get和post请求，掌握了一些开盒技巧，对漏洞利用有了一点粗浅的认知，了解了大量的latex语法（相比以前），突击学习了三个爬虫库，掌握了不少使用搜索引擎的实用技巧，发现了一个很有用的tex论坛（环境非常和谐）…不过了解到了很多接下来可以学习的方向感觉是最大的收获（果然任务驱动式学东西更加适合我，就是累死个人）</p><p>明年还打！</p><p><img src="https://s2.loli.net/2022/10/29/gXIP5KmrnMfeOCo.png" alt="rank.png"></p><p>赛后一周，终于把前面沉迷hackergame而欠下的作业补完，趁现在还没进入高强度icpc备赛，决定继续补一下题，就在这里记录一下补题记录。</p><h1 id="补题"><a href="#补题" class="headerlink" title="补题"></a>补题</h1><h2 id="微积分计算小练习"><a href="#微积分计算小练习" class="headerlink" title="微积分计算小练习"></a>微积分计算小练习</h2><p>赛时看到这道题的时候就觉得应该是个漏洞注入的题目，不过当时不知道怎么下手，赛后看了一下别人的writeup发现是个xss注入，于是去学习了一下xss注入的姿势。</p><p>在搜索的时候发现了美团技术平台的<a href="https://tech.meituan.com/2018/09/27/fe-security.html">一篇文章</a>，翻了翻受益颇多，了解到了xss注入的基本概念和对应的一些操作，这时候回去看一眼题目，随便提交了个12345看了一下源码，发现greeting的代码是直接拼接了username上去的，那么这应该就是xss注入的注入点了，打开bot.py看了看，发现了代码<code>driver.execute_script(f&#39;document.cookie=&quot;flag=&#123;FLAG&#125;&quot;&#39;)</code> 逻辑大概是flag被放在了document.cookie里面（不由感慨写xctptha的时候高强度突击爬虫库现在居然基本看得懂selenium了），又没有任何敏感词过滤，那应该直接注入将cookie放到greeting上面就可以了。不过读取图片失败就执行js脚本这个trick在没有看writeup之前确实没能想到。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">a</span> <span class="hljs-attr">onerror</span>= <span class="hljs-string">&#x27;var a=document.cookie;document.querySelector(&quot;#score&quot;).textContent=a;&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>于是就输出了<code>flag&#123;xS5_1OI_is_N0t_SOHARD_23e903464f&#125;</code>，xss注入真是太奇妙辣</p><p>同时在美团技术平台上面那篇文章给了点xss注入小练习的链接，于是决定顺便去玩一下，把链接放在这里</p><p><a href="https://alf.nu/alert1?world=alert&level=alert1">alert(1) to win</a> </p><p><a href="http://prompt.ml/0">prompt(1) to win</a></p><p><a href="https://xss-game.appspot.com/">XSS game</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
